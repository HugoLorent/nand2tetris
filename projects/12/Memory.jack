// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram;
    static int heapBase;
    static int heapEnd;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;   // Heap starts at address 2048
        let heapEnd = 16383;   // Heap ends at address 16383
        let freeList = heapBase;

        // Initialize the free list with one big block
        let ram[heapBase] = heapEnd - heapBase + 1;  // Size of the free block
        let ram[heapBase + 1] = 0;  // Next pointer (null)
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int current, prev, blockSize, nextBlock;

        if (size < 1) {
            do Sys.error(5); // Illegal allocation size
        }

        // Find a free block of sufficient size
        let current = freeList;
        let prev = 0;

        while (~(current = 0)) {
            let blockSize = ram[current];

            if (blockSize > (size + 1)) {
                // Split the block
                let nextBlock = current + size + 2;
                let ram[nextBlock] = blockSize - size - 2;
                let ram[nextBlock + 1] = ram[current + 1];

                // Update the current block
                let ram[current] = size + 2;
                let ram[current + 1] = 0;

                // Update the free list
                if (prev = 0) {
                    let freeList = nextBlock;
                } else {
                    let ram[prev + 1] = nextBlock;
                }

                return current + 2;
            }

            if (blockSize = (size + 2)) {
                // Exact fit
                if (prev = 0) {
                    let freeList = ram[current + 1];
                } else {
                    let ram[prev + 1] = ram[current + 1];
                }

                return current + 2;
            }

            let prev = current;
            let current = ram[current + 1];
        }

        // No suitable block found
        do Sys.error(6); // Heap overflow
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int block;

        if (o = 0) {
            return; // Null pointer
        }

        let block = o - 2;

        // Add the block to the beginning of the free list
        let ram[block + 1] = freeList;
        let freeList = block;

        return;
    }
}
