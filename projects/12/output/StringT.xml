<tokens>
<keyword> class </keyword>
<identifier> String </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Array </identifier>
<identifier> chars </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> maxLen </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> currentLen </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> String </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> maxLength </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> maxLength </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> error </identifier>
<symbol> ( </symbol>
<integerConstant> 14 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> maxLen </identifier>
<symbol> = </symbol>
<identifier> maxLength </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentLen </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> maxLength </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> chars </identifier>
<symbol> = </symbol>
<identifier> Array </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> maxLength </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> chars </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ~ </symbol>
<symbol> ( </symbol>
<identifier> chars </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> chars </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> length </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> currentLen </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> char </keyword>
<identifier> charAt </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<identifier> currentLen </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> error </identifier>
<symbol> ( </symbol>
<integerConstant> 15 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> chars </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setCharAt </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> j </identifier>
<symbol> , </symbol>
<keyword> char </keyword>
<identifier> c </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> | </symbol>
<symbol> ( </symbol>
<identifier> j </identifier>
<symbol> &gt; </symbol>
<symbol> ( </symbol>
<identifier> currentLen </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> error </identifier>
<symbol> ( </symbol>
<integerConstant> 16 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> chars </identifier>
<symbol> [ </symbol>
<identifier> j </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> String </identifier>
<identifier> appendChar </identifier>
<symbol> ( </symbol>
<keyword> char </keyword>
<identifier> c </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> currentLen </identifier>
<symbol> = </symbol>
<identifier> maxLen </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> error </identifier>
<symbol> ( </symbol>
<integerConstant> 17 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> chars </identifier>
<symbol> [ </symbol>
<identifier> currentLen </identifier>
<symbol> ] </symbol>
<symbol> = </symbol>
<identifier> c </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentLen </identifier>
<symbol> = </symbol>
<identifier> currentLen </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> eraseLastChar </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> currentLen </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> currentLen </identifier>
<symbol> = </symbol>
<identifier> currentLen </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> intValue </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<symbol> , </symbol>
<identifier> result </identifier>
<symbol> , </symbol>
<identifier> digit </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> isNegative </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> result </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> isNegative </identifier>
<symbol> = </symbol>
<keyword> false </keyword>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> currentLen </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> chars </identifier>
<symbol> [ </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ] </symbol>
<symbol> = </symbol>
<integerConstant> 45 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> isNegative </identifier>
<symbol> = </symbol>
<keyword> true </keyword>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> i </identifier>
<symbol> &lt; </symbol>
<identifier> currentLen </identifier>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> chars </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> &gt; </symbol>
<integerConstant> 47 </integerConstant>
<symbol> ) </symbol>
<symbol> &amp; </symbol>
<symbol> ( </symbol>
<identifier> chars </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> &lt; </symbol>
<integerConstant> 58 </integerConstant>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> digit </identifier>
<symbol> = </symbol>
<identifier> chars </identifier>
<symbol> [ </symbol>
<identifier> i </identifier>
<symbol> ] </symbol>
<symbol> - </symbol>
<integerConstant> 48 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> result </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> result </identifier>
<symbol> * </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<identifier> digit </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> i </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> isNegative </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<symbol> - </symbol>
<identifier> result </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> result </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setInt </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> val </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> lastDigit </identifier>
<symbol> , </symbol>
<identifier> absVal </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> currentLen </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> val </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> appendChar </identifier>
<symbol> ( </symbol>
<integerConstant> 45 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> absVal </identifier>
<symbol> = </symbol>
<symbol> - </symbol>
<identifier> val </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> absVal </identifier>
<symbol> = </symbol>
<identifier> val </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> setIntHelper </identifier>
<symbol> ( </symbol>
<identifier> absVal </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setIntHelper </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> val </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> lastDigit </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> lastDigit </identifier>
<symbol> = </symbol>
<identifier> val </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> val </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> val </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> appendChar </identifier>
<symbol> ( </symbol>
<identifier> lastDigit </identifier>
<symbol> + </symbol>
<integerConstant> 48 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> setIntHelper </identifier>
<symbol> ( </symbol>
<identifier> val </identifier>
<symbol> / </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> appendChar </identifier>
<symbol> ( </symbol>
<identifier> lastDigit </identifier>
<symbol> + </symbol>
<integerConstant> 48 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier> newLine </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<integerConstant> 128 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier> backSpace </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<integerConstant> 129 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> char </keyword>
<identifier> doubleQuote </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<integerConstant> 34 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>
