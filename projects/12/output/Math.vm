function Math.init 0
push constant 16
pop static 0
push constant 16
call Array.new 1
pop static 1
push static 1
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 1
push constant 15
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.multiply 4
push argument 0
push constant 0
eq
not
if-goto IF_ELSE_0
push constant 0
return
goto IF_END_1
label IF_ELSE_0
label IF_END_1
push argument 1
push constant 0
eq
not
if-goto IF_ELSE_2
push constant 0
return
goto IF_END_3
label IF_ELSE_2
label IF_END_3
push constant 0
pop local 3
push argument 0
push constant 0
lt
not
if-goto IF_ELSE_4
push argument 0
neg
pop argument 0
push local 3
not
pop local 3
goto IF_END_5
label IF_ELSE_4
label IF_END_5
push argument 1
push constant 0
lt
not
if-goto IF_ELSE_6
push argument 1
neg
pop argument 1
push local 3
not
pop local 3
goto IF_END_7
label IF_ELSE_6
label IF_END_7
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label WHILE_LOOP_8
push local 2
push static 0
lt
not
if-goto WHILE_END_9
push argument 1
push local 2
call Math.bit 2
not
if-goto IF_ELSE_10
push local 0
push local 1
add
pop local 0
goto IF_END_11
label IF_ELSE_10
label IF_END_11
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_LOOP_8
label WHILE_END_9
push local 3
not
if-goto IF_ELSE_12
push local 0
neg
return
goto IF_END_13
label IF_ELSE_12
label IF_END_13
push local 0
return
function Math.divide 2
push argument 1
push constant 0
eq
not
if-goto IF_ELSE_14
push constant 3
call Sys.error 1
pop temp 0
goto IF_END_15
label IF_ELSE_14
label IF_END_15
push constant 0
pop local 1
push argument 0
push constant 0
lt
not
if-goto IF_ELSE_16
push argument 0
neg
pop argument 0
push local 1
not
pop local 1
goto IF_END_17
label IF_ELSE_16
label IF_END_17
push argument 1
push constant 0
lt
not
if-goto IF_ELSE_18
push argument 1
neg
pop argument 1
push local 1
not
pop local 1
goto IF_END_19
label IF_ELSE_18
label IF_END_19
push argument 0
push argument 1
call Math.divideHelper 2
pop local 0
push local 1
not
if-goto IF_ELSE_20
push local 0
neg
return
goto IF_END_21
label IF_ELSE_20
label IF_END_21
push local 0
return
function Math.sqrt 3
push argument 0
push constant 0
lt
not
if-goto IF_ELSE_22
push constant 4
call Sys.error 1
pop temp 0
goto IF_END_23
label IF_ELSE_22
label IF_END_23
push constant 0
pop local 0
push constant 7
pop local 1
label WHILE_LOOP_24
push local 1
push constant 1
neg
gt
not
if-goto WHILE_END_25
push local 0
push static 1
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
push argument 0
gt
not
push local 2
push local 2
call Math.multiply 2
push constant 0
gt
and
not
if-goto IF_ELSE_26
push local 2
pop local 0
goto IF_END_27
label IF_ELSE_26
label IF_END_27
push local 1
push constant 1
sub
pop local 1
goto WHILE_LOOP_24
label WHILE_END_25
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto IF_ELSE_28
push argument 0
return
goto IF_END_29
label IF_ELSE_28
label IF_END_29
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto IF_ELSE_30
push argument 0
return
goto IF_END_31
label IF_ELSE_30
label IF_END_31
push argument 1
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto IF_ELSE_32
push argument 0
neg
return
goto IF_END_33
label IF_ELSE_32
label IF_END_33
push argument 0
return
function Math.bit 0
push argument 0
push static 1
push argument 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
return
function Math.divideHelper 1
push argument 1
push argument 0
gt
not
if-goto IF_ELSE_34
push constant 0
return
goto IF_END_35
label IF_ELSE_34
label IF_END_35
push argument 0
push argument 1
push argument 1
add
call Math.divideHelper 2
pop local 0
push argument 0
push local 0
push local 0
add
sub
push argument 1
call Math.multiply 2
push argument 1
lt
not
if-goto IF_ELSE_36
push local 0
push local 0
add
return
goto IF_END_37
label IF_ELSE_36
push local 0
push local 0
add
push constant 1
add
return
label IF_END_37
