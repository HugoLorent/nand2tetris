function Screen.init 0
push constant 1
neg
pop static 0
push constant 16384
pop static 1
push constant 16
call Array.new 1
pop static 2
push static 2
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 2
push constant 15
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE_LOOP_0
push local 0
push constant 8192
lt
not
if-goto WHILE_END_1
push static 1
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_LOOP_0
label WHILE_END_1
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
not
if-goto IF_ELSE_2
push constant 7
call Sys.error 1
pop temp 0
goto IF_END_3
label IF_ELSE_2
label IF_END_3
push argument 1
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 2
push static 2
push local 2
add
pop pointer 1
push that 0
pop local 1
push static 0
not
if-goto IF_ELSE_4
push static 1
push local 0
add
push static 1
push local 0
add
pop pointer 1
push that 0
push local 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END_5
label IF_ELSE_4
push static 1
push local 0
add
push static 1
push local 0
add
pop pointer 1
push that 0
push local 1
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END_5
push constant 0
return
function Screen.setPixel 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
not
if-goto IF_ELSE_6
push constant 7
call Sys.error 1
pop temp 0
goto IF_END_7
label IF_ELSE_6
label IF_END_7
push argument 1
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 2
push static 2
push local 2
add
pop pointer 1
push that 0
pop local 1
push static 1
push local 0
add
push static 1
push local 0
add
pop pointer 1
push that 0
push local 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.clearPixel 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
not
if-goto IF_ELSE_8
push constant 7
call Sys.error 1
pop temp 0
goto IF_END_9
label IF_ELSE_8
label IF_END_9
push argument 1
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 2
push static 2
push local 2
add
pop pointer 1
push that 0
pop local 1
push static 1
push local 0
add
push static 1
push local 0
add
pop pointer 1
push that 0
push local 1
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.drawLine 6
push argument 0
push argument 2
eq
not
if-goto IF_ELSE_10
push argument 0
push argument 1
push argument 3
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
goto IF_END_11
label IF_ELSE_10
label IF_END_11
push argument 1
push argument 3
eq
not
if-goto IF_ELSE_12
push argument 1
push argument 0
push argument 2
call Screen.drawHorizontalLine 3
pop temp 0
push constant 0
return
goto IF_END_13
label IF_ELSE_12
label IF_END_13
push argument 0
push argument 2
gt
not
if-goto IF_ELSE_14
push argument 0
pop local 5
push argument 2
pop argument 0
push local 5
pop argument 2
push argument 1
pop local 5
push argument 3
pop argument 1
push local 5
pop argument 3
goto IF_END_15
label IF_ELSE_14
label IF_END_15
push argument 2
push argument 0
sub
pop local 0
push argument 3
push argument 1
sub
pop local 1
push constant 0
pop local 2
push constant 0
pop local 3
push constant 0
pop local 4
push local 1
push constant 0
gt
not
if-goto IF_ELSE_16
label WHILE_LOOP_18
push local 2
push local 0
push constant 1
add
lt
push local 3
push local 1
push constant 1
add
lt
and
not
if-goto WHILE_END_19
push argument 0
push local 2
add
push argument 1
push local 3
add
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 0
lt
not
if-goto IF_ELSE_20
push local 2
push constant 1
add
pop local 2
push local 4
push local 1
add
pop local 4
goto IF_END_21
label IF_ELSE_20
push local 3
push constant 1
add
pop local 3
push local 4
push local 0
sub
pop local 4
label IF_END_21
goto WHILE_LOOP_18
label WHILE_END_19
goto IF_END_17
label IF_ELSE_16
push local 1
neg
pop local 1
label WHILE_LOOP_22
push local 2
push local 0
push constant 1
add
lt
push local 3
push local 1
push constant 1
add
lt
and
not
if-goto WHILE_END_23
push argument 0
push local 2
add
push argument 1
push local 3
sub
call Screen.drawPixel 2
pop temp 0
push local 4
push constant 0
lt
not
if-goto IF_ELSE_24
push local 2
push constant 1
add
pop local 2
push local 4
push local 1
add
pop local 4
goto IF_END_25
label IF_ELSE_24
push local 3
push constant 1
add
pop local 3
push local 4
push local 0
sub
pop local 4
label IF_END_25
goto WHILE_LOOP_22
label WHILE_END_23
label IF_END_17
push constant 0
return
function Screen.drawVerticalLine 1
push argument 1
push argument 2
gt
not
if-goto IF_ELSE_26
push argument 1
pop local 0
push argument 2
pop argument 1
push local 0
pop argument 2
goto IF_END_27
label IF_ELSE_26
label IF_END_27
label WHILE_LOOP_28
push argument 1
push argument 2
push constant 1
add
lt
not
if-goto WHILE_END_29
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_LOOP_28
label WHILE_END_29
push constant 0
return
function Screen.drawHorizontalLine 1
push argument 1
push argument 2
gt
not
if-goto IF_ELSE_30
push argument 1
pop local 0
push argument 2
pop argument 1
push local 0
pop argument 2
goto IF_END_31
label IF_ELSE_30
label IF_END_31
label WHILE_LOOP_32
push argument 1
push argument 2
push constant 1
add
lt
not
if-goto WHILE_END_33
push argument 1
push argument 0
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_LOOP_32
label WHILE_END_33
push constant 0
return
function Screen.drawRectangle 1
push argument 0
push argument 2
gt
not
if-goto IF_ELSE_34
push argument 0
pop local 0
push argument 2
pop argument 0
push local 0
pop argument 2
goto IF_END_35
label IF_ELSE_34
label IF_END_35
push argument 1
push argument 3
gt
not
if-goto IF_ELSE_36
push argument 1
pop local 0
push argument 3
pop argument 1
push local 0
pop argument 3
goto IF_END_37
label IF_ELSE_36
label IF_END_37
label WHILE_LOOP_38
push argument 1
push argument 3
push constant 1
add
lt
not
if-goto WHILE_END_39
push argument 1
push argument 0
push argument 2
call Screen.drawHorizontalLine 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_LOOP_38
label WHILE_END_39
push constant 0
return
function Screen.drawCircle 3
push argument 2
push constant 0
lt
push argument 2
push constant 181
gt
or
not
if-goto IF_ELSE_40
push constant 13
call Sys.error 1
pop temp 0
goto IF_END_41
label IF_ELSE_40
label IF_END_41
push argument 2
push argument 2
call Math.multiply 2
pop local 2
push argument 2
neg
pop local 0
label WHILE_LOOP_42
push local 0
push argument 2
push constant 1
add
lt
not
if-goto WHILE_END_43
push local 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 1
push local 0
add
push argument 0
push local 1
sub
push argument 0
push local 1
add
call Screen.drawHorizontalLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_LOOP_42
label WHILE_END_43
push constant 0
return
